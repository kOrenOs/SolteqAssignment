package databaseEntity;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.json.JSONArray;
import org.json.JSONObject;

import constants.DatabaseConstants;
import databaseControllers.OperationClass;
import databaseControllers.SalaryDBOperations;
import databaseControllers.StaffPersonDBOperations;

/**
 * Entity class generated by hibernate reverse engineering.
 */
public class Staffperson implements java.io.Serializable, EntityDefinition {

	private Integer personalId;
	private String fisrtName;
	private String surname;
	private String city;
	private String postalCode;
	private String street;
	private int houseNumber;
	private String phone;
	private String email;
	private Set salaries = new HashSet(0);

	public Staffperson() {
	}

	public Staffperson(String fisrtName, String surname, String city, String postalCode, String street,
			int houseNumber) {
		this.fisrtName = fisrtName;
		this.surname = surname;
		this.city = city;
		this.postalCode = postalCode;
		this.street = street;
		this.houseNumber = houseNumber;
	}

	public Staffperson(String fisrtName, String surname, String city, String postalCode, String street, int houseNumber,
			String phone, String email) {
		this.fisrtName = fisrtName;
		this.surname = surname;
		this.city = city;
		this.postalCode = postalCode;
		this.street = street;
		this.houseNumber = houseNumber;
		this.phone = phone;
		this.email = email;
	}

	public Staffperson(String fisrtName, String surname, String city, String postalCode, String street, int houseNumber,
			String phone, String email, Set salaries) {
		this.fisrtName = fisrtName;
		this.surname = surname;
		this.city = city;
		this.postalCode = postalCode;
		this.street = street;
		this.houseNumber = houseNumber;
		this.phone = phone;
		this.email = email;
		this.salaries = salaries;
	}

	public Integer getPersonalId() {
		return this.personalId;
	}

	public void setPersonalId(Integer personalId) {
		this.personalId = personalId;
	}

	public String getFisrtName() {
		return this.fisrtName;
	}

	public void setFisrtName(String fisrtName) {
		this.fisrtName = fisrtName;
	}

	public String getSurname() {
		return this.surname;
	}

	public void setSurname(String surname) {
		this.surname = surname;
	}

	public String getCity() {
		return this.city;
	}

	public void setCity(String city) {
		this.city = city;
	}

	public String getPostalCode() {
		return this.postalCode;
	}

	public void setPostalCode(String postalCode) {
		this.postalCode = postalCode;
	}

	public String getStreet() {
		return this.street;
	}

	public void setStreet(String street) {
		this.street = street;
	}

	public int getHouseNumber() {
		return this.houseNumber;
	}

	public void setHouseNumber(int houseNumber) {
		this.houseNumber = houseNumber;
	}

	public String getPhone() {
		return this.phone;
	}

	public void setPhone(String phone) {
		this.phone = phone;
	}

	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public Set getSalaries() {
		return this.salaries;
	}

	public void setSalaries(Set salaries) {
		this.salaries = salaries;
	}
	
	@Override
	public boolean equals(Object obj) {
		Staffperson target = (Staffperson) obj;
	
		if(personalId==target.getPersonalId() && fisrtName.compareTo(target.getFisrtName())==0 && surname.compareTo(target.getSurname())==0
				&& city.compareTo(target.getCity())==0 && postalCode.compareTo(target.getPostalCode())==0 && 
						street.compareTo(target.getStreet())==0 && houseNumber==target.getHouseNumber() && phone.compareTo(target.getPhone())==0
						&& email.compareTo(target.getEmail())==0){
			return true;
		}
		return false;
	}

	@Override
	public String toString() {
		return "Staffperson [personalId=" + personalId + ", fisrtName=" + fisrtName + ", surname=" + surname + ", city="
				+ city + ", postalCode=" + postalCode + ", street=" + street + ", houseNumber=" + houseNumber
				+ ", phone=" + phone + ", email=" + email + "]";
	}

	public void copyParameters(Staffperson copySource) {
		this.fisrtName = copySource.getFisrtName();
		this.surname = copySource.getSurname();
		this.city = copySource.getCity();
		this.postalCode = copySource.getPostalCode();
		this.street = copySource.getStreet();
		this.houseNumber = copySource.getHouseNumber();
		this.phone = copySource.getPhone();
		this.email = copySource.getEmail();
	}

	/**
	 * return entity representative column names.
	 */
	@Override
	public List<String> tableColumnNames() {
		List<String> outputList = new ArrayList<>();

		outputList.add(DatabaseConstants.DB_REPRESENTATIVE_NAME_STAFF_PERSON_PERSONAL_ID);
		outputList.add(DatabaseConstants.DB_REPRESENTATIVE_NAME_STAFF_PERSON_FIRST_NAME);
		outputList.add(DatabaseConstants.DB_REPRESENTATIVE_NAME_STAFF_PERSON_SURNAME);
		outputList.add(DatabaseConstants.DB_REPRESENTATIVE_NAME_STAFF_PERSON_CITY);
		outputList.add(DatabaseConstants.DB_REPRESENTATIVE_NAME_STAFF_PERSON_POSTAL_CODE);
		outputList.add(DatabaseConstants.DB_REPRESENTATIVE_NAME_STAFF_PERSON_STREET);
		outputList.add(DatabaseConstants.DB_REPRESENTATIVE_NAME_STAFF_PERSON_HOUSE_NUMBER);
		outputList.add(DatabaseConstants.DB_REPRESENTATIVE_NAME_STAFF_PERSON_PHONE);
		outputList.add(DatabaseConstants.DB_REPRESENTATIVE_NAME_STAFF_PERSON_EMAIL);

		return outputList;
	}

	/**
	 * Exporting data of entity instance to JSONObject
	 */
	@Override
	public JSONObject exportData() {

		JSONObject exportData = new JSONObject();

		exportData.accumulate(DatabaseConstants.DB_REPRESENTATIVE_NAME_STAFF_PERSON_PERSONAL_ID, personalId);
		exportData.accumulate(DatabaseConstants.DB_REPRESENTATIVE_NAME_STAFF_PERSON_FIRST_NAME, fisrtName);
		exportData.accumulate(DatabaseConstants.DB_REPRESENTATIVE_NAME_STAFF_PERSON_SURNAME, surname);
		exportData.accumulate(DatabaseConstants.DB_REPRESENTATIVE_NAME_STAFF_PERSON_CITY, city);
		exportData.accumulate(DatabaseConstants.DB_REPRESENTATIVE_NAME_STAFF_PERSON_POSTAL_CODE, postalCode);
		exportData.accumulate(DatabaseConstants.DB_REPRESENTATIVE_NAME_STAFF_PERSON_STREET, street);
		exportData.accumulate(DatabaseConstants.DB_REPRESENTATIVE_NAME_STAFF_PERSON_HOUSE_NUMBER, houseNumber);
		exportData.accumulate(DatabaseConstants.DB_REPRESENTATIVE_NAME_STAFF_PERSON_PHONE, phone);
		exportData.accumulate(DatabaseConstants.DB_REPRESENTATIVE_NAME_STAFF_PERSON_EMAIL, email);

		JSONArray dataContainer = new JSONArray();
		dataContainer.put(exportData);

		JSONObject finalObject = new JSONObject();
		finalObject.put("personalData", dataContainer);

		return finalObject;
	}

	/**
	 * Mapping of database column names to representative names.
	 */
	@Override
	public String getColumnName(String reprezentativeName) {
		switch (reprezentativeName) {
		case DatabaseConstants.DB_REPRESENTATIVE_NAME_STAFF_PERSON_PERSONAL_ID:
			return "personalId";
		case DatabaseConstants.DB_REPRESENTATIVE_NAME_STAFF_PERSON_FIRST_NAME:
			return "fisrtName";
		case DatabaseConstants.DB_REPRESENTATIVE_NAME_STAFF_PERSON_SURNAME:
			return "surname";
		case DatabaseConstants.DB_REPRESENTATIVE_NAME_STAFF_PERSON_CITY:
			return "city";
		case DatabaseConstants.DB_REPRESENTATIVE_NAME_STAFF_PERSON_POSTAL_CODE:
			return "postalCode";
		case DatabaseConstants.DB_REPRESENTATIVE_NAME_STAFF_PERSON_STREET:
			return "street";
		case DatabaseConstants.DB_REPRESENTATIVE_NAME_STAFF_PERSON_HOUSE_NUMBER:
			return "houseNumber";
		case DatabaseConstants.DB_REPRESENTATIVE_NAME_STAFF_PERSON_PHONE:
			return "phone";
		case DatabaseConstants.DB_REPRESENTATIVE_NAME_STAFF_PERSON_EMAIL:
			return "email";
		default:
			return null;
		}
	}

	/**
	 * Returning instance values on appropriate representative column name
	 */
	@Override
	public String getToStringValue(String reprezentativeName) {
		switch (reprezentativeName) {
		case DatabaseConstants.DB_REPRESENTATIVE_NAME_STAFF_PERSON_PERSONAL_ID:
			return personalId + "";
		case DatabaseConstants.DB_REPRESENTATIVE_NAME_STAFF_PERSON_FIRST_NAME:
			return fisrtName + "";
		case DatabaseConstants.DB_REPRESENTATIVE_NAME_STAFF_PERSON_SURNAME:
			return surname + "";
		case DatabaseConstants.DB_REPRESENTATIVE_NAME_STAFF_PERSON_CITY:
			return city + "";
		case DatabaseConstants.DB_REPRESENTATIVE_NAME_STAFF_PERSON_POSTAL_CODE:
			return postalCode + "";
		case DatabaseConstants.DB_REPRESENTATIVE_NAME_STAFF_PERSON_STREET:
			return street + "";
		case DatabaseConstants.DB_REPRESENTATIVE_NAME_STAFF_PERSON_HOUSE_NUMBER:
			return houseNumber + "";
		case DatabaseConstants.DB_REPRESENTATIVE_NAME_STAFF_PERSON_PHONE:
			return phone + "";
		case DatabaseConstants.DB_REPRESENTATIVE_NAME_STAFF_PERSON_EMAIL:
			return email + "";
		default:
			return null;
		}
	}

	/**
	 * Return empty instance of entity for gathering common data (column names,...)
	 */
	@Override
	public OperationClass getOperationInterface() {
		return new StaffPersonDBOperations();
	}
}
